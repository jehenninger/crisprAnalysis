{
    "collab_server" : "",
    "contents" : "findVariants <- function(){\n  \n  # Load genome file name\n  genome_file <- \"E:\\\\zon_lab\\\\Sequencing\\\\MGH_SEQUENCING\\\\custom_genome\\\\Jon-20.fa\"\n  # genome_file <- choose.files(caption = \"Select indexed genome file...\", multi = FALSE,\n  #                             filters = c(\"Fasta file (*.fa)\",\"*.fa\"))\n  genome_file_no_ext <- tools::file_path_sans_ext(genome_file)\n  \n  #Load GTF file for custom genome\n  gtf_fname <- \"E:\\\\zon_lab\\\\Sequencing\\\\MGH_SEQUENCING\\\\custom_genome\\\\Jon-20.gtf\"\n  # gtf_fname <- choose.files(caption = \"Select genome gtf file...\",\n  #                           filters = c(\"GTF file (*.gtf)\",\"*.gtf\"))\n  txdb <- GenomicFeatures::makeTxDbFromGFF(gtf_fname,format = \"gtf\")\n  \n  #Import BED file information of CRISPR target sites\n  gd_fname <- \"E:\\\\zon_lab\\\\Sequencing\\\\MGH_SEQUENCING\\\\R_custom_genome_target_locations.bed\"\n  # gd_fname <- choose.files(caption = \"Select bed file with CRISPR targets...\",\n  #                          filters = c(\"BED file (*.bed)\",\"*.bed\"))\n  gd <- rtracklayer::import(gd_fname)\n  gdl <- GenomicRanges::resize(gd, width(gd) + 10, fix = \"center\") #add 5 bp to each side for visualization\n  \n  \n  #Get reference sequences for each gene\n  genome_seq <- readDNAStringSet(genome_file)\n  reference <- BSgenome::getSeq(genome_seq,gdl)\n  \n  \n  \n  #Load metadata table\n  md_fname <- choose.files(caption = \"Select bam file meta data...\",\n                           filters = c(\"Excel file (*.xlsx)\",\"*.xlsx\"))\n  md <- gdata::read.xls(md_fname,1)\n  \n  \n  \n  #Convert metadata columns to characters\n  md$bamfile <- file.path(md$bamfile)\n  md$short.name <- as.character(md$short.name)\n  md$genes <- as.character(md$genes)\n  md$group <- as.character(md$group)\n  \n  \n  #Get targeted regions and delete empty spaces\n  injected_gRNA <- md$genes\n  md <- subset(md, select = -genes)\n  md[md == \"\"] <- NA\n  md <- na.omit(md)\n  injected_gRNA[injected_gRNA == \"\"] <- NA\n  injected_gRNA <- na.omit(injected_gRNA)\n  \n  \n  #Get total number of aligned reads per sample\n  total_aligned_reads <- lapply(md$bamfile, function(x) countBam(x,param=ScanBamParam(flag=scanBamFlag(isUnmappedQuery=FALSE))))\n  md$total_reads <- sapply(total_aligned_reads, function(x) x$records)\n  md <- subset(md,total_reads>0)\n  \n  #Find indices of targeted regions in the gdl GRanges\n  gene_idx <- pmatch(injected_gRNA, gdl$name)\n  \n  #Rearrange groups to individual fish\n  samples <- split(md, md$short.name)\n  num_of_samples <- length(samples)\n  \n  \n  #Get or make directory for excel outputs\n  bam_dir <- dirname(dirname(md$bamfile[1]))\n  \n  if(dir.exists(file.path(bam_dir,\"excel_output\"))) {\n    excel_output_dir <- file.path(bam_dir,\"excel_output\")\n  } else {\n    dir.create(file.path(bam_dir,\"excel_output\"))\n    excel_output_dir <- file.path(bam_dir,\"excel_output\")\n  }\n  \n  \n  # generate excel outputs\n  crispr_set <- list(length(gene_idx))\n  wb <- list()\n  excel_fname <- list()\n  \n  min_count <- 25\n  min_freq <- 0.5\n  \n  for(i in 1:num_of_samples) {\n    num_of_groups <- length(samples[[i]]$group)\n    excel_fname <- file.path(excel_output_dir,paste(unique(samples[[i]]$short.name),\".xlsx\",sep=\"\"),fsep=\"\\\\\")\n    crispr_set <- readsToTargets(file.path(samples[[i]]$bamfile), targets = gdl[gene_idx], references = reference[gene_idx],\n                                 names = samples[[i]]$group, target.loc = 22, verbose=TRUE)\n    \n    wb <- createWorkbook(type=\"xlsx\")\n    sheet <- createSheet(wb,sheetName=\"variants\")\n    \n    r_count <- 1\n    c_count <- 1\n    \n    header <- matrix(NA,nrow=1,ncol=num_of_groups,dimnames=list(c(\"total reads mapped\"), c(paste(samples[[i]]$short.name,samples[[i]]$group,sep=\"_\"))))\n    \n    header[1,] <- samples[[i]]$total_reads\n    \n    addDataFrame(header,sheet,startRow=1,startColumn=1)\n    addDataFrame(\"sample name\",sheet,startRow=1,startColumn=1,row.names=FALSE,col.names=FALSE)\n    \n    r_count <- r_count+1\n    \n    ###########################  UNFILTERED  #########################\n    \n    for(j in 1:length(crispr_set)){\n      #get total variant counts\n      var_data_reads <- variantCounts(crispr_set[[j]])\n      var_data_percent <- variantCounts(crispr_set[[j]],result=\"proportions\")\n      var_data_percent <- round(var_data_percent,3)\n      \n      #get total indel counts\n      indel_reads <- var_data_reads[-grep(\"SNV|no var|Other\",rownames(var_data_reads)),,drop = FALSE]\n      # indel_percent <- var_data_percent[-grep(\"SNV|no var|Other\",rownames(var_data_percent)),]\n      \n      #test to make sure that there are any indels\n      if(length(indel_reads)>0){\n        \n        \n        indel_cigar <- rownames(indel_reads)\n        \n        \n        #Get rid of locations, colons, and commas from modified CIGAR strings\n        #Isolate numbers from strings to detect if frameshift or in-frame\n        indel_cigar <- gsub(\"^[^:]*:|,.*:\",\"\",indel_cigar)\n        indel_cigar <- strsplit(indel_cigar,\"[DI]\")\n        indel_cigar <- lapply(indel_cigar,function(x) sum(as.numeric(x)))\n        indel_cigar <- unlist(indel_cigar)\n        fs_test <- indel_cigar%%3>0\n      }\n      \n      #test if all groups of a sample have aligned reads to the amplicon\n      amplicon_test <- lapply(samples[[i]]$group, function(x) grep(x, lapply(crispr_set[[j]]$crispr_runs,\n                                                                             function(x) x$name)))\n      \n      amplicon_test <- amplicon_test >= 1\n      amplicon_test[is.na(amplicon_test)] <- FALSE\n      group_names <- samples[[i]]$group\n      \n      \n      #intialize stored variables\n      reads_mapped_to_target <- integer(num_of_groups)\n      reads_mapped_to_target_percent <- integer(num_of_groups)\n      total_no_var_reads <- integer(num_of_groups)\n      total_no_var_percent <- integer(num_of_groups)\n      total_indel_reads <- integer(num_of_groups)\n      total_indel_percent <- integer(num_of_groups)\n      total_fs_reads <- integer(num_of_groups)\n      total_fs_percent <-integer(num_of_groups)\n      \n      for(k in 1:num_of_groups){\n        \n        \n        if(amplicon_test[[k]]){ #if there are aligned reads\n          \n          #find column index of group\n          group_idx <- grep(group_names[k],colnames(var_data_reads))\n          \n          group_var_data_reads <- var_data_reads[,group_idx, drop = FALSE]\n          \n          group_indel_reads <- indel_reads[,group_idx, drop = FALSE]\n          \n          \n          #total reads and % mapped to target\n          reads_mapped_to_target[k] <- length(crispr_set[[j]]$crispr_runs[[group_idx]]$alns)\n          reads_mapped_to_target_percent[k] <- round(100*reads_mapped_to_target[group_idx]/samples[[i]]$total_reads[[group_idx]],3)\n          \n          #get no variant counts and %\n          no_var_reads <- sum(group_var_data_reads[grep(\"no var\",rownames(group_var_data_reads))])\n          no_var_percent <- 100*no_var_reads/reads_mapped_to_target[k]\n          \n          #get SNV reads and %\n          snv_reads <- sum(group_var_data_reads[grep(\"SNV\",rownames(group_var_data_reads))])\n          snv_percent <- 100*snv_reads/reads_mapped_to_target[k]\n          \n          #sum the SNV and no var to get total \"wildtype\" counts and %\n          total_no_var_reads[k] <- no_var_reads + snv_reads\n          total_no_var_percent[k] <- no_var_percent + snv_percent\n          \n          #sum total indels and frameshifts\n          #test if there are indel reads\n          \n          if(length(group_indel_reads)>0){\n            total_indel_reads[k] <- sum(group_indel_reads)\n            total_indel_percent[k] <- 100*total_indel_reads[k]/reads_mapped_to_target[k]\n            \n            total_fs_reads[k] <- sum(group_indel_reads[fs_test,,drop = FALSE])\n            total_fs_percent[k] <- 100*total_fs_reads[k]/reads_mapped_to_target[k]\n            \n            \n            \n          } else {\n            total_indel_reads[k] <- 0\n            total_indel_percent[k] <- 0\n            total_fs_reads[k] <- 0\n            total_fs_percent[k] <- 0\n          }\n          \n        } else { #if tissue is missing for amplicon, then output all 0's\n          reads_mapped_to_target[k] <- 0\n          reads_mapped_to_target_percent[k] <- 0\n          total_no_var_reads[k] <- 0\n          total_no_var_percent[k] <- 0\n          total_indel_reads[k] <- 0\n          total_indel_percent[k] <- 0\n          total_fs_reads[k] <- 0\n          total_fs_percent[k] <-0\n          \n        }\n      }\n      \n      #add target name\n      addDataFrame(crispr_set[[j]]$target$name,sheet,startRow=4,startColumn=c_count,row.names=FALSE,col.names=FALSE)\n      \n      #construct matrix\n      total_info <- matrix(NA,nrow=5,ncol=2*num_of_groups,dimnames=list(c(\"reads mapped to target\",\"--\",\"no variant\",\"indels\",\"frameshifts\"),\n                                                                        c(paste(samples[[i]]$group,\"reads\",sep=\"_\"),\n                                                                          paste(samples[[i]]$group,\"percent\",sep=\"_\"))))\n      \n      total_info[1,] <- c(reads_mapped_to_target,reads_mapped_to_target_percent)\n      total_info[3,] <- c(total_no_var_reads,total_no_var_percent)\n      total_info[4,] <- c(total_indel_reads,total_indel_percent)\n      total_info[5,] <- c(total_fs_reads,total_fs_percent)\n      \n      addDataFrame(total_info,sheet,startRow=5,startColumn=c_count)\n      \n      \n      #variant information\n      #Variant data\n      var_data <- cbind(var_data_reads,var_data_percent)\n      addDataFrame(var_data,sheet,startRow=12, startColumn = c_count)\n      \n      c_count <- c_count+2*num_of_groups+2\n      \n    }\n    \n    \n    ########################### FILTERED  ############################\n    sheet <- createSheet(wb,sheetName=\"filtered variants\")\n    r_count <- 2\n    c_count <- 1\n    \n    for(j in 1:length(crispr_set)){\n      #get total variant counts\n      var_data_reads <- variantCounts(crispr_set[[j]],\n                                      min.count = min_count,\n                                      min.freq = min_freq,\n                                      include.chimeras = FALSE)\n      var_data_percent <- variantCounts(crispr_set[[j]],\n                                        result=\"proportions\",\n                                        min.count = min_count,\n                                        min.freq = min_freq,\n                                        include.chimeras = FALSE)\n      var_data_percent <- round(var_data_percent,3)\n      \n      #get total indel counts\n      indel_reads <- var_data_reads[-grep(\"SNV|no var|Other\",rownames(var_data_reads)),,drop = FALSE]\n      # indel_percent <- var_data_percent[-grep(\"SNV|no var|Other\",rownames(var_data_percent)),]\n      \n      #test to make sure that there are any indels\n      if(length(indel_reads)>0){\n        \n        \n        indel_cigar <- rownames(indel_reads)\n        \n        \n        #Get rid of locations, colons, and commas from modified CIGAR strings\n        #Isolate numbers from strings to detect if frameshift or in-frame\n        indel_cigar <- gsub(\"^[^:]*:|,.*:\",\"\",indel_cigar)\n        indel_cigar <- strsplit(indel_cigar,\"[DI]\")\n        indel_cigar <- lapply(indel_cigar,function(x) sum(as.numeric(x)))\n        indel_cigar <- unlist(indel_cigar)\n        fs_test <- indel_cigar%%3>0\n      }\n      \n      #test if all groups of a sample have aligned reads to the amplicon\n      amplicon_test <- lapply(samples[[i]]$group, function(x) grep(x, lapply(crispr_set[[j]]$crispr_runs,\n                                                                             function(x) x$name)))\n      \n      amplicon_test <- amplicon_test >= 1\n      amplicon_test[is.na(amplicon_test)] <- FALSE\n      group_names <- samples[[i]]$group\n      \n      \n      #intialize stored variables\n      reads_mapped_to_target <- integer(num_of_groups)\n      reads_mapped_to_target_percent <- integer(num_of_groups)\n      total_no_var_reads <- integer(num_of_groups)\n      total_no_var_percent <- integer(num_of_groups)\n      total_indel_reads <- integer(num_of_groups)\n      total_indel_percent <- integer(num_of_groups)\n      total_fs_reads <- integer(num_of_groups)\n      total_fs_percent <-integer(num_of_groups)\n      \n      for(k in 1:num_of_groups){\n        \n        \n        if(amplicon_test[[k]]){ #if there are aligned reads\n          \n          #find column index of group\n          group_idx <- grep(group_names[k],colnames(var_data_reads))\n          \n          group_var_data_reads <- var_data_reads[,group_idx, drop = FALSE]\n          \n          group_indel_reads <- indel_reads[,group_idx, drop = FALSE]\n          \n          \n          #total reads and % mapped to target\n          reads_mapped_to_target[k] <- length(crispr_set[[j]]$crispr_runs[[group_idx]]$alns)\n          reads_mapped_to_target_percent[k] <- round(100*reads_mapped_to_target[group_idx]/samples[[i]]$total_reads[[group_idx]],3)\n          \n          #get no variant counts and %\n          no_var_reads <- sum(group_var_data_reads[grep(\"no var\",rownames(group_var_data_reads))])\n          no_var_percent <- 100*no_var_reads/reads_mapped_to_target[k]\n          \n          #get SNV reads and %\n          snv_reads <- sum(group_var_data_reads[grep(\"SNV\",rownames(group_var_data_reads))])\n          snv_percent <- 100*snv_reads/reads_mapped_to_target[k]\n          \n          #sum the SNV and no var to get total \"wildtype\" counts and %\n          total_no_var_reads[k] <- no_var_reads + snv_reads\n          total_no_var_percent[k] <- no_var_percent + snv_percent\n          \n          #sum total indels and frameshifts\n          #test if there are indel reads\n          \n          if(length(group_indel_reads)>0){\n            total_indel_reads[k] <- sum(group_indel_reads)\n            total_indel_percent[k] <- 100*total_indel_reads[k]/reads_mapped_to_target[k]\n            \n            total_fs_reads[k] <- sum(group_indel_reads[fs_test,,drop = FALSE])\n            total_fs_percent[k] <- 100*total_fs_reads[k]/reads_mapped_to_target[k]\n            \n            \n            \n          } else {\n            total_indel_reads[k] <- 0\n            total_indel_percent[k] <- 0\n            total_fs_reads[k] <- 0\n            total_fs_percent[k] <- 0\n          }\n          \n        } else { #if tissue is missing for amplicon, then output all 0's\n          reads_mapped_to_target[k] <- 0\n          reads_mapped_to_target_percent[k] <- 0\n          total_no_var_reads[k] <- 0\n          total_no_var_percent[k] <- 0\n          total_indel_reads[k] <- 0\n          total_indel_percent[k] <- 0\n          total_fs_reads[k] <- 0\n          total_fs_percent[k] <-0\n          \n        }\n      }\n      \n      #add target name\n      addDataFrame(crispr_set[[j]]$target$name,sheet,startRow=4,startColumn=c_count,row.names=FALSE,col.names=FALSE)\n      \n      #construct matrix\n      total_info <- matrix(NA,nrow=5,ncol=2*num_of_groups,dimnames=list(c(\"reads mapped to target\",\"--\",\"no variant\",\"indels\",\"frameshifts\"),\n                                                                        c(paste(samples[[i]]$group,\"reads\",sep=\"_\"),\n                                                                          paste(samples[[i]]$group,\"percent\",sep=\"_\"))))\n      \n      total_info[1,] <- c(reads_mapped_to_target,reads_mapped_to_target_percent)\n      total_info[3,] <- c(total_no_var_reads,total_no_var_percent)\n      total_info[4,] <- c(total_indel_reads,total_indel_percent)\n      total_info[5,] <- c(total_fs_reads,total_fs_percent)\n      \n      addDataFrame(total_info,sheet,startRow=5,startColumn=c_count)\n      \n      \n      #variant information\n      #Variant data\n      var_data <- cbind(var_data_reads,var_data_percent)\n      addDataFrame(var_data,sheet,startRow=12, startColumn = c_count)\n      \n      c_count <- c_count+2*num_of_groups+2\n      \n    }\n    \n    \n    ##################### FILTERED FRAMESHIFT  ######################\n    sheet <- createSheet(wb,sheetName=\"filtered frameshift variants\")\n    r_count <- 2\n    c_count <- 1\n    \n    for(j in 1:length(crispr_set)){\n      #get total variant counts\n      var_data_reads <- variantCounts(crispr_set[[j]],\n                                      min.count = min_count,\n                                      min.freq = min_freq,\n                                      include.chimeras = FALSE)\n      var_data_percent <- variantCounts(crispr_set[[j]],\n                                        result=\"proportions\",\n                                        min.count = min_count,\n                                        min.freq = min_freq,\n                                        include.chimeras = FALSE)\n      var_data_percent <- round(var_data_percent,3)\n      \n      #get total indel counts\n      indel_reads <- var_data_reads[-grep(\"SNV|no var|Other\",rownames(var_data_reads)),,drop = FALSE]\n      # indel_percent <- var_data_percent[-grep(\"SNV|no var|Other\",rownames(var_data_percent)),]\n      \n      #test to make sure that there are any indels\n      if(length(indel_reads)>0){\n        \n        \n        indel_cigar <- rownames(indel_reads)\n        \n        \n        #Get rid of locations, colons, and commas from modified CIGAR strings\n        #Isolate numbers from strings to detect if frameshift or in-frame\n        indel_cigar <- gsub(\"^[^:]*:|,.*:\",\"\",indel_cigar)\n        indel_cigar <- strsplit(indel_cigar,\"[DI]\")\n        indel_cigar <- lapply(indel_cigar,function(x) sum(as.numeric(x)))\n        indel_cigar <- unlist(indel_cigar)\n        fs_test <- indel_cigar%%3>0\n        \n        #to filter fs reads, find number of rows that are 'no var' or 'SNV'\n        wtNumRows <- nrow(var_data_reads[grep(\"SNV|no var\",rownames(var_data_reads)),,drop = FALSE])\n        fs_test_padded <- !logical(length = wtNumRows)\n        fs_test_padded <- c(fs_test_padded,fs_test)\n        \n        var_data_reads <- var_data_reads[fs_test_padded,,drop = FALSE]\n        var_data_percent <- var_data_percent[fs_test_padded,,drop = FALSE]\n      }\n      \n      #test if all groups of a sample have aligned reads to the amplicon\n      amplicon_test <- lapply(samples[[i]]$group, function(x) grep(x, lapply(crispr_set[[j]]$crispr_runs,\n                                                                             function(x) x$name)))\n      \n      amplicon_test <- amplicon_test >= 1\n      amplicon_test[is.na(amplicon_test)] <- FALSE\n      group_names <- samples[[i]]$group\n      \n      \n      #intialize stored variables\n      reads_mapped_to_target <- integer(num_of_groups)\n      reads_mapped_to_target_percent <- integer(num_of_groups)\n      total_no_var_reads <- integer(num_of_groups)\n      total_no_var_percent <- integer(num_of_groups)\n      total_indel_reads <- integer(num_of_groups)\n      total_indel_percent <- integer(num_of_groups)\n      total_fs_reads <- integer(num_of_groups)\n      total_fs_percent <-integer(num_of_groups)\n      \n      for(k in 1:num_of_groups){\n        \n        \n        if(amplicon_test[[k]]){ #if there are aligned reads\n          \n          #find column index of group\n          group_idx <- grep(group_names[k],colnames(var_data_reads))\n          \n          group_var_data_reads <- var_data_reads[,group_idx, drop = FALSE]\n          \n          group_indel_reads <- indel_reads[,group_idx, drop = FALSE]\n          \n          \n          #total reads and % mapped to target\n          reads_mapped_to_target[k] <- length(crispr_set[[j]]$crispr_runs[[group_idx]]$alns)\n          reads_mapped_to_target_percent[k] <- round(100*reads_mapped_to_target[group_idx]/samples[[i]]$total_reads[[group_idx]],3)\n          \n          #get no variant counts and %\n          no_var_reads <- sum(group_var_data_reads[grep(\"no var\",rownames(group_var_data_reads))])\n          no_var_percent <- 100*no_var_reads/reads_mapped_to_target[k]\n          \n          #get SNV reads and %\n          snv_reads <- sum(group_var_data_reads[grep(\"SNV\",rownames(group_var_data_reads))])\n          snv_percent <- 100*snv_reads/reads_mapped_to_target[k]\n          \n          #sum the SNV and no var to get total \"wildtype\" counts and %\n          total_no_var_reads[k] <- no_var_reads + snv_reads\n          total_no_var_percent[k] <- no_var_percent + snv_percent\n          \n          #sum total indels and frameshifts\n          #test if there are indel reads\n          \n          if(length(group_indel_reads)>0){\n            total_indel_reads[k] <- sum(group_indel_reads)\n            total_indel_percent[k] <- 100*total_indel_reads[k]/reads_mapped_to_target[k]\n            \n            total_fs_reads[k] <- sum(group_indel_reads[fs_test,,drop = FALSE])\n            total_fs_percent[k] <- 100*total_fs_reads[k]/reads_mapped_to_target[k]\n            \n            \n            \n          } else {\n            total_indel_reads[k] <- 0\n            total_indel_percent[k] <- 0\n            total_fs_reads[k] <- 0\n            total_fs_percent[k] <- 0\n          }\n          \n        } else { #if tissue is missing for amplicon, then output all 0's\n          reads_mapped_to_target[k] <- 0\n          reads_mapped_to_target_percent[k] <- 0\n          total_no_var_reads[k] <- 0\n          total_no_var_percent[k] <- 0\n          total_indel_reads[k] <- 0\n          total_indel_percent[k] <- 0\n          total_fs_reads[k] <- 0\n          total_fs_percent[k] <-0\n          \n        }\n      }\n      \n      #add target name\n      addDataFrame(crispr_set[[j]]$target$name,sheet,startRow=4,startColumn=c_count,row.names=FALSE,col.names=FALSE)\n      \n      #construct matrix\n      total_info <- matrix(NA,nrow=5,ncol=2*num_of_groups,dimnames=list(c(\"reads mapped to target\",\"--\",\"no variant\",\"indels\",\"frameshifts\"),\n                                                                        c(paste(samples[[i]]$group,\"reads\",sep=\"_\"),\n                                                                          paste(samples[[i]]$group,\"percent\",sep=\"_\"))))\n      \n      total_info[1,] <- c(reads_mapped_to_target,reads_mapped_to_target_percent)\n      total_info[3,] <- c(total_no_var_reads,total_no_var_percent)\n      total_info[4,] <- c(total_indel_reads,total_indel_percent)\n      total_info[5,] <- c(total_fs_reads,total_fs_percent)\n      \n      addDataFrame(total_info,sheet,startRow=5,startColumn=c_count)\n      \n      \n      #variant information\n      #Variant data\n      var_data <- cbind(var_data_reads,var_data_percent)\n      addDataFrame(var_data,sheet,startRow = 12, startColumn = c_count)\n      \n      c_count <- c_count+2*num_of_groups+2\n      \n    }\n    \n    ##################### FILTERED NONFRAMESHIFT  ######################\n    sheet <- createSheet(wb,sheetName=\"filtered nonframeshift variants\")\n    r_count <- 2\n    c_count <- 1\n    \n    for(j in 1:length(crispr_set)){\n      #get total variant counts\n      var_data_reads <- variantCounts(crispr_set[[j]],\n                                      min.count = min_count,\n                                      min.freq = min_freq,\n                                      include.chimeras = FALSE)\n      var_data_percent <- variantCounts(crispr_set[[j]],\n                                        result=\"proportions\",\n                                        min.count = min_count,\n                                        min.freq = min_freq,\n                                        include.chimeras = FALSE)\n      var_data_percent <- round(var_data_percent,3)\n      \n      #get total indel counts\n      indel_reads <- var_data_reads[-grep(\"SNV|no var|Other\",rownames(var_data_reads)),,drop = FALSE]\n      # indel_percent <- var_data_percent[-grep(\"SNV|no var|Other\",rownames(var_data_percent)),]\n      \n      #test to make sure that there are any indels\n      if(length(indel_reads)>0){\n        \n        \n        indel_cigar <- rownames(indel_reads)\n        \n        \n        #Get rid of locations, colons, and commas from modified CIGAR strings\n        #Isolate numbers from strings to detect if frameshift or in-frame\n        indel_cigar <- gsub(\"^[^:]*:|,.*:\",\"\",indel_cigar)\n        indel_cigar <- strsplit(indel_cigar,\"[DI]\")\n        indel_cigar <- lapply(indel_cigar,function(x) sum(as.numeric(x)))\n        indel_cigar <- unlist(indel_cigar)\n        fs_test <- indel_cigar%%3>0\n        \n        #to filter fs reads, find number of rows that are 'no var' or 'SNV'\n        wtNumRows <- nrow(var_data_reads[grep(\"SNV|no var\",rownames(var_data_reads)),,drop = FALSE])\n        fs_test_padded <- logical(length = wtNumRows) #initialize these as false so that they are true later on\n        fs_test_padded <- c(fs_test_padded,fs_test)\n        \n        var_data_reads <- var_data_reads[!fs_test_padded,,drop = FALSE]\n        var_data_percent <- var_data_percent[!fs_test_padded,,drop = FALSE]\n      }\n      \n      #test if all groups of a sample have aligned reads to the amplicon\n      amplicon_test <- lapply(samples[[i]]$group, function(x) grep(x, lapply(crispr_set[[j]]$crispr_runs,\n                                                                             function(x) x$name)))\n      \n      amplicon_test <- amplicon_test >= 1\n      amplicon_test[is.na(amplicon_test)] <- FALSE\n      group_names <- samples[[i]]$group\n      \n      \n      #intialize stored variables\n      reads_mapped_to_target <- integer(num_of_groups)\n      reads_mapped_to_target_percent <- integer(num_of_groups)\n      total_no_var_reads <- integer(num_of_groups)\n      total_no_var_percent <- integer(num_of_groups)\n      total_indel_reads <- integer(num_of_groups)\n      total_indel_percent <- integer(num_of_groups)\n      total_fs_reads <- integer(num_of_groups)\n      total_fs_percent <-integer(num_of_groups)\n      \n      for(k in 1:num_of_groups){\n        \n        \n        if(amplicon_test[[k]]){ #if there are aligned reads\n          \n          #find column index of group\n          group_idx <- grep(group_names[k],colnames(var_data_reads))\n          \n          group_var_data_reads <- var_data_reads[,group_idx, drop = FALSE]\n          \n          group_indel_reads <- indel_reads[,group_idx, drop = FALSE]\n          \n          \n          #total reads and % mapped to target\n          reads_mapped_to_target[k] <- length(crispr_set[[j]]$crispr_runs[[group_idx]]$alns)\n          reads_mapped_to_target_percent[k] <- round(100*reads_mapped_to_target[group_idx]/samples[[i]]$total_reads[[group_idx]],3)\n          \n          #get no variant counts and %\n          no_var_reads <- sum(group_var_data_reads[grep(\"no var\",rownames(group_var_data_reads))])\n          no_var_percent <- 100*no_var_reads/reads_mapped_to_target[k]\n          \n          #get SNV reads and %\n          snv_reads <- sum(group_var_data_reads[grep(\"SNV\",rownames(group_var_data_reads))])\n          snv_percent <- 100*snv_reads/reads_mapped_to_target[k]\n          \n          #sum the SNV and no var to get total \"wildtype\" counts and %\n          total_no_var_reads[k] <- no_var_reads + snv_reads\n          total_no_var_percent[k] <- no_var_percent + snv_percent\n          \n          #sum total indels and frameshifts\n          #test if there are indel reads\n          \n          if(length(group_indel_reads)>0){\n            total_indel_reads[k] <- sum(group_indel_reads)\n            total_indel_percent[k] <- 100*total_indel_reads[k]/reads_mapped_to_target[k]\n            \n            total_fs_reads[k] <- sum(group_indel_reads[fs_test,,drop = FALSE])\n            total_fs_percent[k] <- 100*total_fs_reads[k]/reads_mapped_to_target[k]\n            \n            \n            \n          } else {\n            total_indel_reads[k] <- 0\n            total_indel_percent[k] <- 0\n            total_fs_reads[k] <- 0\n            total_fs_percent[k] <- 0\n          }\n          \n        } else { #if tissue is missing for amplicon, then output all 0's\n          reads_mapped_to_target[k] <- 0\n          reads_mapped_to_target_percent[k] <- 0\n          total_no_var_reads[k] <- 0\n          total_no_var_percent[k] <- 0\n          total_indel_reads[k] <- 0\n          total_indel_percent[k] <- 0\n          total_fs_reads[k] <- 0\n          total_fs_percent[k] <-0\n          \n        }\n      }\n      \n      #add target name\n      addDataFrame(crispr_set[[j]]$target$name,sheet,startRow=4,startColumn=c_count,row.names=FALSE,col.names=FALSE)\n      \n      #construct matrix\n      total_info <- matrix(NA,nrow=5,ncol=2*num_of_groups,dimnames=list(c(\"reads mapped to target\",\"--\",\"no variant\",\"indels\",\"frameshifts\"),\n                                                                        c(paste(samples[[i]]$group,\"reads\",sep=\"_\"),\n                                                                          paste(samples[[i]]$group,\"percent\",sep=\"_\"))))\n      \n      total_info[1,] <- c(reads_mapped_to_target,reads_mapped_to_target_percent)\n      total_info[3,] <- c(total_no_var_reads,total_no_var_percent)\n      total_info[4,] <- c(total_indel_reads,total_indel_percent)\n      total_info[5,] <- c(total_fs_reads,total_fs_percent)\n      \n      addDataFrame(total_info,sheet,startRow=5,startColumn=c_count)\n      \n      \n      #variant information\n      #Variant data\n      var_data <- cbind(var_data_reads,var_data_percent)\n      addDataFrame(var_data,sheet,startRow=12, startColumn = c_count)\n      \n      c_count <- c_count+2*num_of_groups+2\n      \n    }\n    \n    saveWorkbook(wb,excel_fname)\n    \n  }\n}",
    "created" : 1493823887327.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "104|45|237|4|\n238|42|381|4|\n382|47|532|4|\n533|50|685|4|\n",
    "hash" : "3989080281",
    "id" : "45B44276",
    "lastKnownWriteTime" : 1493824041,
    "last_content_update" : 1493824041224,
    "path" : "~/GitHub/crisprAnalysis/bin/findVariants.R",
    "project_path" : "bin/findVariants.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}